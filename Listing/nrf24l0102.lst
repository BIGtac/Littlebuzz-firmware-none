C51 COMPILER V9.00   NRF24L0102                                                            12/19/2016 15:28:11 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE NRF24L0102
OBJECT MODULE PLACED IN .\Output\nrf24l0102.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE Common\src\nrf24l0102.c LARGE BROWSE INCDIR(.\Common\inc;.\Driver\inc;.\BSP
                    -;.\Startup;.\User) DEBUG OBJECTEXTEND PRINT(.\Listing\nrf24l0102.lst) OBJECT(.\Output\nrf24l0102.obj)

line level    source

   1          #include "IAP15W4K61S4.h"
   2          #include <intrins.h>
   3          #include <NRF24L0102.H>
   4          #include "led.h"
   5          #include "delay.h"
   6          
   7          unsigned char TxBuf[20]={0};
   8          unsigned char RxBuf[20]={0}; // 接收的数据 数组
   9          //*********************************************NRF24L01*************************************
  10          #define TX_ADR_WIDTH    5       // 5 uints TX address width
  11          #define RX_ADR_WIDTH    5       // 5 uints RX address width
  12          #define TX_PLOAD_WIDTH  20      // 20 uints TX payload
  13          #define RX_PLOAD_WIDTH  20      // 20 uints TX payload
  14          uint const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};        //本地地址
  15          uint const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};        //接收地址
  16          
  17          //*****************************************长延时*****************************************
  18          void Delay(unsigned int s)
  19          {
  20   1              unsigned int i;
  21   1              for(i=0; i<s; i++);
  22   1              for(i=0; i<s; i++);
  23   1      }
  24          //******************************************************************************************
  25          uint    bdata sta;   //状态标志
  26          sbit    RX_DR   =sta^6;
  27          sbit    TX_DS   =sta^5;
  28          sbit    MAX_RT  =sta^4;
  29          sbit  TX_FULL =sta^0;
  30          /******************************************************************************************
  31          /*延时函数
  32          /******************************************************************************************/
  33          void inerDelay_us(unsigned char n)
  34          {
  35   1              for(;n>0;n--);
  36   1              _nop_();
  37   1      
  38   1      }
  39          //****************************************************************************************
  40          /*NRF24L01初始化
  41          //***************************************************************************************/
  42          void init_NRF24L01(void)
  43          {
  44   1              CE=0;    // chip enable
  45   1              CSN=1;   // Spi  disable 
  46   1              SCK=0;   // 
  47   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 写本地地址  
  48   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 写接收端地址
  49   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
  50   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21  
  51   1              //SPI_RW_Reg(WRITE_REG + EN_AA, 0x00);           //失能通道0自动应答
  52   1          //SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);    //接收要使能接收通道0
  53   1      
  54   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0);        //   设置信道工作为2.4GHZ，收发必须一致
C51 COMPILER V9.00   NRF24L0102                                                            12/19/2016 15:28:11 PAGE 2   

  55   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为32字节
  56   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1MB/S，发射功率为最大值+7dB，由于有X2401L功放
             -，实际+21dbm输出
  57   1      }
  58          /****************************************************************************************************
  59          /*函数：uint SPI_RW(uint uchar)
  60          /*功能：NRF24L01的SPI写时序
  61          /****************************************************************************************************/
  62          uint SPI_RW(uint uchar)
  63          {
  64   1              uint bit_ctr;
  65   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
  66   1              {
  67   2                      MOSI = (uchar & 0x80);         // output 'uchar', MSB to MOSI
  68   2                      uchar = (uchar << 1);           // shift next bit into MSB..
  69   2                      SCK = 1;                      // Set SCK high..
  70   2                      inerDelay_us(12);
  71   2                      uchar |= MISO;                    // capture current MISO bit
  72   2                      inerDelay_us(12);
  73   2                      SCK = 0;                          // ..then set SCK low again
  74   2              }
  75   1          return(uchar);                        // return read uchar
  76   1      }
  77          /****************************************************************************************************
  78          /*函数：uchar SPI_Read(uchar reg)
  79          /*功能：NRF24L01的SPI时序
  80          /****************************************************************************************************/
  81          uchar SPI_Read(uchar reg)
  82          {
  83   1              uchar reg_val;
  84   1              
  85   1              CSN = 0;                // CSN low, initialize SPI communication...
  86   1              inerDelay_us(12);
  87   1              SPI_RW(reg);            // Select register to read from..
  88   1              inerDelay_us(12);
  89   1              reg_val = SPI_RW(0);    // ..then read registervalue
  90   1              inerDelay_us(12);
  91   1              CSN = 1;                // CSN high, terminate SPI communication
  92   1              
  93   1              return(reg_val);        // return register value
  94   1      }
  95          /****************************************************************************************************/
  96          /*功能：NRF24L01读写寄存器函数
  97          /****************************************************************************************************/
  98          uint SPI_RW_Reg(uchar reg, uchar value)
  99          {
 100   1              uint status;
 101   1              
 102   1              CSN = 0;                   // CSN low, init SPI transaction
 103   1              status = SPI_RW(reg);      // select register
 104   1              SPI_RW(value);             // ..and write value to it..
 105   1              CSN = 1;                   // CSN high again
 106   1              
 107   1              return(status);            // return nRF24L01 status uchar
 108   1      }
 109          /****************************************************************************************************/
 110          /*函数：uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 111          /*功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 112          /****************************************************************************************************/
 113          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 114          {
 115   1              uint status,uchar_ctr;
C51 COMPILER V9.00   NRF24L0102                                                            12/19/2016 15:28:11 PAGE 3   

 116   1              
 117   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 118   1              status = SPI_RW(reg);                   // Select register to write to and read status uchar
 119   1              
 120   1              for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 121   1                      pBuf[uchar_ctr] = SPI_RW(0);    // 
 122   1              
 123   1              CSN = 1;                           
 124   1              
 125   1              return(status);                    // return nRF24L01 status uchar
 126   1      }
 127          /*********************************************************************************************************
 128          /*函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 129          /*功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 130          /*********************************************************************************************************
             -/
 131          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 132          {
 133   1              uint status,uchar_ctr;
 134   1              
 135   1              CSN = 0;            //SPI使能       
 136   1              status = SPI_RW(reg);   
 137   1              for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 138   1              SPI_RW(*pBuf++);
 139   1              CSN = 1;           //关闭SPI
 140   1              return(status);    // 
 141   1      }
 142          /****************************************************************************************************/
 143          /*函数：void SetRX_Mode(void)
 144          /*功能：数据接收配置 
 145          /****************************************************************************************************/
 146          void SetRX_Mode(void)
 147          {
 148   1              CE=0;
 149   1              SPI_RW_Reg(WRITE_REG+STATUS,0xff);
 150   1              SPI_RW_Reg(FLUSH_RX, 0x00);
 151   1              SPI_RW_Reg(WRITE_REG + CONFIG2, 0x7f);                  // IRQ收发完成中断响应，16位CRC ，主接收
 152   1              CE = 1; 
 153   1              inerDelay_us(2600);   
 154   1      }
 155          void SetTX_Mode(void)
 156          {
 157   1              CE=0;
 158   1              SPI_RW_Reg(WRITE_REG+STATUS,0xff);
 159   1              SPI_RW_Reg(FLUSH_TX, 0x00);
 160   1              SPI_RW_Reg(WRITE_REG + CONFIG2, 0x7e);                  // IRQ收发完成中断响应，16位CRC ，主接收
 161   1              CE = 1; 
 162   1              inerDelay_us(2600);   
 163   1      }
 164          /******************************************************************************************************/
 165          /*函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 166          /*功能：数据读取后放如rx_buf接收缓冲区中
 167          /******************************************************************************************************/
 168          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 169          {
 170   1              unsigned char revale=0;
 171   1              //DisableInterrupts;
 172   1              sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 173   1              SPI_RW_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 174   1              if(RX_DR)                               // 判断是否接收到数据
 175   1              {
 176   2                  CE = 0;                     //SPI使能
C51 COMPILER V9.00   NRF24L0102                                                            12/19/2016 15:28:11 PAGE 4   

 177   2                      SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 178   2                      revale =1;                      //读取数据完成标志
 179   2                      CE=1; 
 180   2              }
 181   1              
 182   1              
 183   1              // EnableInterrupts;                                                                      
 184   1              return revale;
 185   1      }
 186          /*********************************************************************************************************
             -**
 187          /*函数：void nRF24L01_TxPacket(unsigned char * tx_buf)
 188          /*功能：发送 tx_buf中数据
 189          /*********************************************************************************************************
             -*/
 190          void nRF24L01_TxPacket(unsigned char * tx_buf)
 191          {
 192   1              SPI_RW_Reg(WRITE_REG+STATUS,0xff);
 193   1              SPI_RW_Reg(0xE1,0xff);
 194   1              CE=0;           
 195   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 写接收端地址
 196   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);                          
 197   1              CE=1;            
 198   1              inerDelay_us(200);   //CE高电平大于10us才能进入发射模式
 199   1      }
 200          
 201          unsigned char NRF24L01_Check(void)
 202                  {
 203   1              uchar check_in_buf[5]={0x11,0x22,0x33,0x44,0x55};
 204   1              uchar check_out_buf[5]={0x00};
 205   1              SPI_Write_Buf(WRITE_REG+TX_ADDR,check_in_buf,5);//写入5个字节的地址.    
 206   1              SPI_Read_Buf(TX_ADDR,check_out_buf,5); //读出写入的地址  
 207   1              if((check_out_buf[0] == 0x11)&&(check_out_buf[1] == 0x22)&&(check_out_buf[2] == 0x33)&&(check_out_buf[3] 
             -== 0x44)&&(check_out_buf[4] == 0x55))
 208   1              return 0;
 209   1              else return 1;
 210   1      }                                                                  
 211                          
 212          void checkstatus()
 213          {
 214   1      unsigned char temp1,temp2;
 215   1              temp1=SPI_Read(STATUS);
 216   1                temp2=SPI_Read(FIFO_STATUS);
 217   1                if(temp1==0x40)
 218   1                      {
 219   2                              //Delaynms(100);
 220   2                              LED0=~LED0;
 221   2                              LED1=~LED1;                     
 222   2                      }       
 223   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    646    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =     50      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
